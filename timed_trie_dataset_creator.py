# -*- coding: utf-8 -*-
"""timed_trie_2_response_alternate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1siixg1gbp-Jv0SZe0cbkvlIohQ6n09av

# Timed Trie (response/alternate/... analysis)
This notebook is for application of timmed trie on (response/alternate/...) trace
"""

# !pip install -q rstr;
# !pip install -q pyvis;
# !apt-get -qq install graphviz graphviz-dev -y && pip install -q pygraphviz;

import matplotlib.pyplot as plt
from graphviz import Digraph
import numpy as np
import pandas as pd

import rstr
import random
import sys
import seaborn
import statistics
import difflib
import time
from typing import Tuple
from itertools import accumulate
from operator import add
import copy
import re

"""# Mine for properties

## Trace Generation
"""


# Get trace and the associated event time. This follows a strict regex pattern
# pattern has to be a valid regex
# variability is the variational delta between neighboring event
def getTrace(pattern='ab+ac', windowTimeLengthVariability=5):
    deltaDistribution = []

    trace = rstr.xeger(pattern)

    deltaDistribution.extend(list((random.randint(1, max(1, windowTimeLengthVariability)) for e in range(1, len(trace)+1))))
    time = list(accumulate(deltaDistribution, add))

    print("Synthetic: Trace generated & Trace time generated successfully")

    return trace, time


def getTimeShift(time):
    time_new = [0]

    # Complex but short
    # time_shift = [0]
    # time_shift.extend(time[0:len(time)-1])
    # time_new = list(0 if i == 0 else time[i]-time_shift[i] for i in list(range(0, len(time))))

    # Simple but long
    for i in range(1, len(time)):
        time_diff = max(0, time[i] - time[i - 1])
        time_new.append((time_diff))


    return time_new


def completeTrace(pattern='ab+ac', windowTimeLengthVariability=15, local_clock=False):
    trace, time = "", [];

    trace, time = getTrace(pattern, windowTimeLengthVariability)

    if local_clock:
        time = getTimeShift(time)

    return trace, time


"""#### Hyperparameter"""

VARIABILITY_WINDOW_LENGTH = 5  # for synthetic trace generation

"""#### Generate Synthetic trace"""

# regex_trace = "ab+ac"
regex_trace = "(c{1,3}(ac{1,3}bc{1,3}){1,3}){10,12}"
# regex_trace = "([a-e]{100,200}){100,200}"

# regex_trace_response = "([bz]*(a[a-cz]*b[bz]*)){1,2}"
regex_trace_response_restricted = "([bz]{0,2}(a[a-cz]{0,5}b[bz]{0,2})){3,15}"
# regex_trace_alternating = "[cz]*(a[ca]*b[cz]*)*"
# regex_trace_alternating_restricted = "[c-z]{0,2}(a[c-z]{0,2}b[c-z]{0,2}){2,3}"

def generateTrace(regex_trace, variability_window_length=VARIABILITY_WINDOW_LENGTH, local_clock=False):
    trace, trace_time = completeTrace(regex_trace, variability_window_length, local_clock)
    trace_size = len(trace)
    print("Trace length : ", trace_size)

    trace_dataset_np = np.row_stack((trace_time, list(trace))).T
    # print("trace ", trace, "\ntime", trace_time)
    trace_dataset_df = pd.DataFrame(trace_dataset_np, columns=["Time", "Event"])
    return trace_dataset_df

trace_dataset_df = generateTrace(regex_trace, VARIABILITY_WINDOW_LENGTH, False)
trace_dataset_df.to_csv("/home/pradeep/UBC/Projects/Data-Mining/TTT - A_star/codebase/timedStateTrie/Dataset/synthetic_trace2.csv")